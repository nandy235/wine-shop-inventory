-- ===============================================
-- Suppliers Table Creation
-- ===============================================

-- Create suppliers table
CREATE TABLE IF NOT EXISTS suppliers (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    shop_id BIGINT NOT NULL REFERENCES shops(id) ON DELETE RESTRICT,
    name VARCHAR(255) NOT NULL,
    contact_person VARCHAR(255) NOT NULL,
    phone VARCHAR(20) NOT NULL,
    email VARCHAR(255),
    address TEXT,
    license_number VARCHAR(100),
    gst_number VARCHAR(15),
    supplier_type VARCHAR(20) DEFAULT 'DISTRIBUTOR' CHECK (supplier_type IN ('DISTRIBUTOR', 'MANUFACTURER', 'WHOLESALER', 'IMPORTER', 'OTHER')),
    is_active BOOLEAN DEFAULT true,
    notes TEXT,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(shop_id, name),
    CONSTRAINT chk_phone_length CHECK (LENGTH(phone) >= 10)
);

-- Add indexes for better performance
CREATE INDEX IF NOT EXISTS idx_suppliers_shop_id ON suppliers(shop_id);
CREATE INDEX IF NOT EXISTS idx_suppliers_name ON suppliers(name);
CREATE INDEX IF NOT EXISTS idx_suppliers_active ON suppliers(is_active);

-- Add comments
COMMENT ON TABLE suppliers IS 'Supplier information for each shop';
COMMENT ON COLUMN suppliers.supplier_type IS 'Type of supplier: DISTRIBUTOR, MANUFACTURER, WHOLESALER, IMPORTER, OTHER';
COMMENT ON COLUMN suppliers.is_active IS 'Whether the supplier is currently active';

-- Update trigger for updated_at
CREATE OR REPLACE FUNCTION update_suppliers_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER suppliers_updated_at_trigger
    BEFORE UPDATE ON suppliers
    FOR EACH ROW
    EXECUTE FUNCTION update_suppliers_updated_at();

SELECT 'Suppliers table created successfully!' as status;
