-- ===============================================
-- Wine Shop Inventory Management System
-- New Stock Tables - Part 7: Received Stock Table
-- ===============================================

-- ===============================================
-- DROP EXISTING TABLES (if they exist)
-- ===============================================
DROP TABLE IF EXISTS received_stock_records CASCADE;

-- ===============================================
-- TABLE 1: RECEIVED STOCK RECORDS
-- ===============================================
-- Tracks all stock received from different sources with support for negative values (transfers out)
CREATE TABLE received_stock_records (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    shop_id BIGINT NOT NULL REFERENCES shops(id) ON DELETE RESTRICT,
    master_brand_id BIGINT NOT NULL REFERENCES master_brands(id) ON DELETE RESTRICT,
    record_date DATE NOT NULL DEFAULT CURRENT_DATE,
    
    -- Stock source tracking (quantities in bottles)
    invoice_quantity INTEGER DEFAULT 0,           -- From confirmed invoices
    manual_quantity INTEGER DEFAULT 0,            -- Manual stock onboarding
    transfer_quantity INTEGER DEFAULT 0,          -- Shift/transfer (can be negative for outgoing)
    
    -- Calculated total
    total_received INTEGER GENERATED ALWAYS AS (
        COALESCE(invoice_quantity, 0) + 
        COALESCE(manual_quantity, 0) + 
        COALESCE(transfer_quantity, 0)
    ) STORED,
    
    -- Reference tracking
    invoice_id BIGINT REFERENCES invoices(id) ON DELETE SET NULL,  -- Link to source invoice if applicable
    transfer_reference VARCHAR(100),              -- Reference for transfers (shop name, invoice number, etc.)
    notes TEXT,                                   -- Additional notes
    
    -- Audit fields
    created_by BIGINT REFERENCES users(id) ON DELETE SET NULL,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    
    -- Constraints
    CONSTRAINT chk_received_stock_valid CHECK (
        -- At least one quantity type must be non-zero
        (invoice_quantity != 0 OR manual_quantity != 0 OR transfer_quantity != 0)
    ),
    
    -- Unique constraint to prevent duplicate entries for same shop/brand/date/source
    UNIQUE(shop_id, master_brand_id, record_date, invoice_id) DEFERRABLE INITIALLY DEFERRED
);



-- ===============================================
-- INDEXES FOR PERFORMANCE
-- ===============================================

-- Received Stock Records Indexes
CREATE INDEX idx_received_stock_shop_date ON received_stock_records(shop_id, record_date);
CREATE INDEX idx_received_stock_brand ON received_stock_records(master_brand_id);
CREATE INDEX idx_received_stock_invoice ON received_stock_records(invoice_id) WHERE invoice_id IS NOT NULL;
CREATE INDEX idx_received_stock_transfers ON received_stock_records(shop_id, record_date) WHERE transfer_quantity != 0;
CREATE INDEX idx_received_stock_created_by ON received_stock_records(created_by, created_at);



-- Composite indexes for reporting
CREATE INDEX idx_received_stock_reporting ON received_stock_records(shop_id, master_brand_id, record_date) 
  INCLUDE (invoice_quantity, manual_quantity, transfer_quantity, total_received);



-- ===============================================
-- TRIGGERS FOR AUTOMATION
-- ===============================================

-- Trigger function to sync daily_stock_records.received_stock with received_stock_records
CREATE OR REPLACE FUNCTION trg_sync_daily_stock_received()
RETURNS TRIGGER AS $$
DECLARE
    target_shop_inventory_id BIGINT;
    total_received_qty INTEGER;
BEGIN
    -- Get shop_inventory_id for this shop + master_brand combination
    SELECT si.id INTO target_shop_inventory_id
    FROM shop_inventory si
    WHERE si.shop_id = NEW.shop_id 
      AND si.master_brand_id = NEW.master_brand_id
    LIMIT 1;
    
    -- Calculate total received from all sources for this date
    SELECT COALESCE(SUM(total_received), 0) INTO total_received_qty
    FROM received_stock_records 
    WHERE shop_id = NEW.shop_id 
      AND master_brand_id = NEW.master_brand_id 
      AND record_date = NEW.record_date;
    
    -- Update daily_stock_records.received_stock
    IF target_shop_inventory_id IS NOT NULL THEN
        UPDATE daily_stock_records 
        SET received_stock = total_received_qty
        WHERE shop_inventory_id = target_shop_inventory_id 
          AND stock_date = NEW.record_date;
        
        -- If no daily stock record exists, create one
        IF NOT FOUND THEN
            INSERT INTO daily_stock_records (
                shop_inventory_id, stock_date, opening_stock, received_stock, closing_stock
            ) VALUES (
                target_shop_inventory_id, 
                NEW.record_date,
                0, -- Will be updated by existing triggers
                total_received_qty,
                NULL
            );
        END IF;
    END IF;
    

    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;



-- Trigger function for updated_at timestamp
CREATE OR REPLACE FUNCTION trg_update_timestamp()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at := CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create triggers
CREATE TRIGGER sync_daily_stock_on_received
    AFTER INSERT OR UPDATE OR DELETE ON received_stock_records
    FOR EACH ROW
    EXECUTE FUNCTION trg_sync_daily_stock_received();

CREATE TRIGGER auto_populate_opening_stock
    BEFORE INSERT OR UPDATE ON closing_stock_records
    FOR EACH ROW
    EXECUTE FUNCTION trg_auto_populate_opening_stock();

CREATE TRIGGER update_received_stock_timestamp
    BEFORE UPDATE ON received_stock_records
    FOR EACH ROW
    EXECUTE FUNCTION trg_update_timestamp();

CREATE TRIGGER update_closing_stock_timestamp
    BEFORE UPDATE ON closing_stock_records
    FOR EACH ROW
    EXECUTE FUNCTION trg_update_timestamp();

-- ===============================================
-- VIEWS FOR REPORTING
-- ===============================================

-- View: Daily Stock Summary with new granular data
CREATE OR REPLACE VIEW v_daily_stock_summary_enhanced AS
SELECT
    cs.shop_id,
    s.shop_name,
    cs.record_date,
    cs.master_brand_id,
    mb.brand_number,
    mb.brand_name,
    mb.size_ml,
    mb.size_code,
    mb.product_type,
    
    -- Stock quantities
    cs.opening_stock,
    cs.total_received,
    cs.total_available,
    cs.closing_stock,
    cs.calculated_sales,
    
    -- Received stock breakdown
    COALESCE(rs_summary.invoice_quantity, 0) as received_from_invoices,
    COALESCE(rs_summary.manual_quantity, 0) as received_manual,
    COALESCE(rs_summary.transfer_quantity, 0) as received_transfers,
    
    -- Financial data
    cs.unit_price,
    cs.sales_value,
    
    -- Status
    cs.is_finalized,
    cs.variance_notes,
    cs.finalized_at,
    
    -- Performance metrics
    CASE 
        WHEN cs.total_available = 0 THEN 0
        ELSE ROUND((cs.calculated_sales::DECIMAL / cs.total_available) * 100, 2)
    END as sales_percentage

FROM closing_stock_records cs
JOIN shops s ON s.id = cs.shop_id
JOIN master_brands mb ON mb.id = cs.master_brand_id
LEFT JOIN (
    SELECT 
        shop_id,
        master_brand_id,
        record_date,
        SUM(invoice_quantity) as invoice_quantity,
        SUM(manual_quantity) as manual_quantity,
        SUM(transfer_quantity) as transfer_quantity
    FROM received_stock_records
    GROUP BY shop_id, master_brand_id, record_date
) rs_summary ON rs_summary.shop_id = cs.shop_id 
    AND rs_summary.master_brand_id = cs.master_brand_id 
    AND rs_summary.record_date = cs.record_date
ORDER BY cs.record_date DESC, s.shop_name, mb.brand_number;

-- View: Stock Transfer Summary
CREATE OR REPLACE VIEW v_stock_transfers AS
SELECT
    rs.id,
    rs.shop_id,
    s.shop_name,
    rs.master_brand_id,
    mb.brand_number,
    mb.brand_name,
    mb.size_ml,
    rs.record_date,
    rs.transfer_quantity,
    rs.transfer_reference,
    rs.notes,
    CASE 
        WHEN rs.transfer_quantity > 0 THEN 'RECEIVED'
        WHEN rs.transfer_quantity < 0 THEN 'TRANSFERRED_OUT'
        ELSE 'NO_TRANSFER'
    END as transfer_type,
    rs.created_at,
    u.name as created_by_name
FROM received_stock_records rs
JOIN shops s ON s.id = rs.shop_id
JOIN master_brands mb ON mb.id = rs.master_brand_id
LEFT JOIN users u ON u.id = rs.created_by
WHERE rs.transfer_quantity != 0
ORDER BY rs.record_date DESC, rs.created_at DESC;

-- ===============================================
-- COMMENTS FOR DOCUMENTATION
-- ===============================================

COMMENT ON TABLE received_stock_records IS 'Granular tracking of all stock received from different sources including transfers';
COMMENT ON TABLE closing_stock_records IS 'Daily closing stock snapshots with calculated sales and variance tracking';

COMMENT ON COLUMN received_stock_records.invoice_quantity IS 'Stock received from confirmed invoices (bottles)';
COMMENT ON COLUMN received_stock_records.manual_quantity IS 'Manually added stock during onboarding (bottles)';
COMMENT ON COLUMN received_stock_records.transfer_quantity IS 'Stock transferred in/out (negative for outgoing transfers)';
COMMENT ON COLUMN received_stock_records.total_received IS 'Auto-calculated sum of all quantity types';

COMMENT ON COLUMN closing_stock_records.opening_stock IS 'Stock at start of day (auto-populated from previous day)';
COMMENT ON COLUMN closing_stock_records.total_received IS 'Total received during day (auto-calculated from received_stock_records)';
COMMENT ON COLUMN closing_stock_records.closing_stock IS 'Actual counted stock at end of day';
COMMENT ON COLUMN closing_stock_records.calculated_sales IS 'Auto-calculated: opening + received - closing';
COMMENT ON COLUMN closing_stock_records.is_finalized IS 'Whether closing stock count is confirmed and locked';

COMMENT ON VIEW v_daily_stock_summary_enhanced IS 'Enhanced daily stock summary with granular received stock breakdown';
COMMENT ON VIEW v_stock_transfers IS 'Summary of all stock transfers between shops or locations';

-- ===============================================
-- INITIAL SETUP COMPLETE
-- ===============================================
SELECT 'Schema Part 7: New Stock Tables created successfully!' as status;
SELECT 'Added tables: received_stock_records, closing_stock_records' as tables_added;
SELECT 'Added views: v_daily_stock_summary_enhanced, v_stock_transfers' as views_added;
