-- ===============================================
-- Wine Shop Inventory Management System
-- Complete Database Schema - Part 1: Extensions & Tables
-- ===============================================

-- Load required extensions first
CREATE EXTENSION IF NOT EXISTS pg_trgm;
CREATE EXTENSION IF NOT EXISTS citext;

-- ===============================================
-- DROP EXISTING TABLES (in reverse dependency order)
-- ===============================================
DROP TABLE IF EXISTS daily_payments CASCADE;
DROP TABLE IF EXISTS other_income CASCADE;
DROP TABLE IF EXISTS expenses CASCADE;
DROP TABLE IF EXISTS invoices CASCADE;
DROP TABLE IF EXISTS daily_stock_records CASCADE;
DROP TABLE IF EXISTS shop_inventory CASCADE;
DROP TABLE IF EXISTS master_brands CASCADE;
DROP TABLE IF EXISTS shops CASCADE;
DROP TABLE IF EXISTS users CASCADE;

-- ===============================================
-- TABLE CREATION (9 Core Tables)
-- ===============================================

-- 1. Users Table
CREATE TABLE users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email citext UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- 2. Shops Table
CREATE TABLE shops (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE RESTRICT,
    shop_name VARCHAR(255) NOT NULL,
    address TEXT,
    license_number VARCHAR(100),
    retailer_code VARCHAR(7) NOT NULL CHECK (retailer_code ~ '^\d{7}$'),
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);

-- 3. Master Brands Table (State-wide Reference)
CREATE TABLE master_brands (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    brand_number VARCHAR(50) NOT NULL,
    size_ml INTEGER NOT NULL,
    brand_name VARCHAR(255) NOT NULL,
    size_code VARCHAR(10) NOT NULL,
    product_type VARCHAR(20) NOT NULL CHECK (product_type IN ('IML', 'BEER', 'DUTY_PAID', 'DUTY_FREE')),
    pack_type CHAR(1) NOT NULL CHECK (pack_type IN ('G', 'P', 'C', 'B')),
    pack_quantity INTEGER NOT NULL DEFAULT 12,
    standard_mrp DECIMAL(10,2),
    brand_kind VARCHAR(50), -- Product sub-category (WHISKY, WINE, BEER, etc.)
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(brand_number, size_ml, pack_quantity, pack_type),
    CONSTRAINT chk_pack_qty_pos CHECK (pack_quantity > 0)
);

-- 4. Shop Inventory Table
CREATE TABLE shop_inventory (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    shop_id BIGINT NOT NULL REFERENCES shops(id) ON DELETE RESTRICT,
    master_brand_id BIGINT NOT NULL REFERENCES master_brands(id) ON DELETE RESTRICT,
    markup_price DECIMAL(10,2) DEFAULT 0,
    final_price DECIMAL(10,2), -- Maintained by triggers, not generated
    current_quantity INTEGER NOT NULL DEFAULT 0,
    is_active BOOLEAN DEFAULT true,
    last_updated TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(shop_id, master_brand_id),
    CONSTRAINT chk_inventory_nonnegative CHECK (
        markup_price >= 0 AND 
        current_quantity >= 0 AND
        (final_price IS NULL OR final_price >= 0)
    )
);

-- 5. Daily Stock Records Table
CREATE TABLE daily_stock_records (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    shop_inventory_id BIGINT NOT NULL REFERENCES shop_inventory(id) ON DELETE CASCADE,
    stock_date DATE NOT NULL,
    opening_stock INTEGER NOT NULL DEFAULT 0,
    received_stock INTEGER NOT NULL DEFAULT 0,
    total_stock INTEGER GENERATED ALWAYS AS (opening_stock + received_stock) STORED,
    closing_stock INTEGER, -- NULL by default, application sets to total_stock until user updates
    sales INTEGER GENERATED ALWAYS AS (
        GREATEST(opening_stock + received_stock - COALESCE(closing_stock, opening_stock + received_stock), 0)
    ) STORED,
    price_per_unit DECIMAL(10,2),
    sale_value DECIMAL(10,2) GENERATED ALWAYS AS (
        GREATEST(opening_stock + received_stock - COALESCE(closing_stock, opening_stock + received_stock), 0)
        * COALESCE(price_per_unit, 0)
    ) STORED,
    UNIQUE(shop_inventory_id, stock_date),
    CONSTRAINT chk_nonnegative_vals CHECK (
        opening_stock >= 0 AND
        received_stock >= 0 AND
        (closing_stock IS NULL OR closing_stock >= 0) AND
        (price_per_unit IS NULL OR price_per_unit >= 0)
    ),
    CONSTRAINT chk_closing_not_exceed_total CHECK (
        closing_stock IS NULL OR 
        closing_stock <= opening_stock + received_stock
    )
);

-- 6. Invoices Table
CREATE TABLE invoices (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    shop_id BIGINT NOT NULL REFERENCES shops(id) ON DELETE RESTRICT,
    invoice_date DATE NOT NULL,
    icdc_number VARCHAR(100),
    invoice_value DECIMAL(12,2),
    mrp_rounding_off DECIMAL(10,2),
    net_invoice_value DECIMAL(12,2) GENERATED ALWAYS AS (
        COALESCE(invoice_value, 0) + COALESCE(mrp_rounding_off, 0)
    ) STORED,
    retail_shop_excise_turnover_tax DECIMAL(10,2),
    special_excise_cess DECIMAL(10,2),
    tcs DECIMAL(10,2),
    status VARCHAR(20) DEFAULT 'pending',
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT uq_shop_invoice UNIQUE (shop_id, icdc_number)
);

-- 7. Expenses Table
CREATE TABLE expenses (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    shop_id BIGINT NOT NULL REFERENCES shops(id) ON DELETE RESTRICT,
    expense_date DATE NOT NULL,
    category VARCHAR(100),
    amount DECIMAL(10,2) NOT NULL,
    description TEXT,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT chk_expense_amount CHECK (amount > 0)
);

-- 8. Other Income Table
CREATE TABLE other_income (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    shop_id BIGINT NOT NULL REFERENCES shops(id) ON DELETE RESTRICT,
    income_date DATE NOT NULL,
    source VARCHAR(100),
    amount DECIMAL(10,2) NOT NULL,
    description TEXT,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT chk_income_amount CHECK (amount > 0)
);

-- 9. Daily Payments Table
CREATE TABLE daily_payments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    shop_id BIGINT NOT NULL REFERENCES shops(id) ON DELETE RESTRICT,
    payment_date DATE NOT NULL,
    cash_amount DECIMAL(10,2) DEFAULT 0,
    upi_amount DECIMAL(10,2) DEFAULT 0,
    card_amount DECIMAL(10,2) DEFAULT 0,
    total_amount DECIMAL(10,2) GENERATED ALWAYS AS (
        COALESCE(cash_amount, 0) + COALESCE(upi_amount, 0) + COALESCE(card_amount, 0)
    ) STORED,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(shop_id, payment_date),
    CONSTRAINT chk_payment_nonnegative CHECK (
        cash_amount >= 0 AND upi_amount >= 0 AND card_amount >= 0
    )
);

-- ===============================================
-- COMMENTS FOR DOCUMENTATION
-- ===============================================

COMMENT ON TABLE users IS 'User accounts - shop owners and managers';
COMMENT ON TABLE shops IS 'Individual wine shops belonging to users';
COMMENT ON TABLE master_brands IS 'State-wide reference database of all available wine brands';
COMMENT ON TABLE shop_inventory IS 'Each shop''s inventory of brands with pricing';
COMMENT ON TABLE daily_stock_records IS 'Daily stock movements for each shop''s inventory items';
COMMENT ON TABLE invoices IS 'Purchase invoices from suppliers';

COMMENT ON TABLE expenses IS 'Shop operational expenses';
COMMENT ON TABLE other_income IS 'Non-sales income sources';
COMMENT ON TABLE daily_payments IS 'Daily payment collection records by payment method';

COMMENT ON COLUMN shop_inventory.final_price IS 'Auto-calculated: standard_mrp + markup_price via triggers';
COMMENT ON COLUMN daily_stock_records.total_stock IS 'Auto-calculated: opening_stock + received_stock';
COMMENT ON COLUMN daily_stock_records.sales IS 'Auto-calculated: total_stock - closing_stock (or 0 if NULL)';
COMMENT ON COLUMN daily_stock_records.sale_value IS 'Auto-calculated: sales * price_per_unit';

COMMENT ON COLUMN invoices.net_invoice_value IS 'Auto-calculated: invoice_value + mrp_rounding_off';

-- ===============================================
-- INITIAL SETUP COMPLETE
-- ===============================================
SELECT 'Schema Part 1: Extensions and Tables created successfully!' as status;
